#!/bin/env python

# Print a header file to map the dsid to the groups (used for the xsec uncertainty)
# Run this as
# ./python/print_group_header.py > ../SusyTest0/DsidGroups.h

# davide.gerbaudo@gmail.com
# Mar 2014

import collections
import datetime

import datasets

tab = 4*' '

def main() :
    targetGroups = ['kUnknown',
                    'kTtbar',
                    'kSingleTop',
                    'kTtbarW',
                    'kTtbarZ',
                    'kWw',
                    'kWz',
                    'kZz',
                    'kWwjj',
                    'kTriboson',
                    'kZjets',
                    'kHiggs',
                    ]
    mcDsets = datasets.activeDatasets(datasets.datasets)
    mcDsets = [d for d in mcDsets if not d.type=='data' and not d.isSignal]
    dsPerGroup = collections.defaultdict(list)
    for d in mcDsets :
        g = group(d)
        dsPerGroup[g].append(d)
    if len(dsPerGroup['kUnknown']) :
        print 4*'-'+' Warning : unknown group for '+4*'-'
        print "this header will not compile"
        for d in dsPerGroup['kUnknown'] :
            print d.name
    dsPerGroup = dict((k,v) for k,v in dsPerGroup.iteritems() if k!='kUnknown')
    printHeader(dsPerGroup)

def group(d) :
    if   d.group=='zjets' : return 'kZjets'
    elif d.group=='wjets' : return 'kZjets' # for now we will use the same uncertainty as for Zjets
    elif d.group=='ttbar' : return groupFromTtbar(d)
    elif d.group=='diboson' : return groupFromDiboson(d)
    elif d.group=='heavyflavor' : return 'kTriboson' # for now use 100% as for triboson
    elif d.group=='higgs' : return 'kHiggs'
    else : return 'kUnknown'
def groupFromTtbar(d) :
    g = 'kUnknown'
    if   d.process=='singletop' :  g = 'kSingleTop'
    elif d.process=='ttbar' :    g = 'kTtbar'
    elif d.process=='ttbarWW' :  g = 'kTtbar'
    elif d.process=='ttbargam' : g = 'kTtbar'
    elif d.process=='4top' :     g = 'kTtbar'
    elif d.process=='ttbarV' :
        if   'ttbarW' in d.name : g = 'kTtbarW'
        elif 'ttbarZ' in d.name : g = 'kTtbarZ'
    return g
def groupFromDiboson(d) :
    g = 'kUnknown'
    if   d.process=='gg2ZZJimmy' : g = 'kZz'
    elif d.process=='gg2wwJimmy' : g = 'kWw'
    elif d.process=='Sherpa_Vgamma' : g = 'kTriboson'
    elif d.process=='Triboson' : g = 'kTriboson'
    elif d.process=='Sherpa_llnunu' :
        if 'llnunu_SS_EW6' in d.name : g = 'kWwjj' # not sure of this one
        elif 'llnunujj_SS' in d.name : g = 'kWwjj'
        elif 'llll_ZZ' in d.name : g = 'kZz' # not sure of this one
    elif d.process=='Sherpa_VVtollqq_MassiveCB' or d.process=='Sherpa_llnunu_MassiveCB' :
        if   'WW' in d.name : g = 'kWw'
        elif 'WZ' in d.name : g = 'kWz'
        elif 'ZW' in d.name : g = 'kWz'
        elif 'ZZ' in d.name : g = 'kZz'
    return g

def arrayName(group) : return "kDsidFor%(group)s"%{'group':group}
def printHeader(dsPerGroup={}) :
    print "#ifndef SUSY_WH_DSIDGROUPS_H"
    print "#define SUSY_WH_DSIDGROUPS_H"
    print ""
    print "// This header was generated by print_group_header.py on %s" % datetime.datetime.now()
    print ""
    print "#include \"SusyTest0/XsecUncertainty.h\""
    print "#include <vector>"
    print "#include <algorithm>"
    print "namespace susy {"
    print "namespace wh {"
    print '\n'
    
    def intlist2cArray(l) : return "{ %s }"%','.join([str(i) for i in l])
    templateArrayLine = "const int %(arrayName)s [] = %(array)s ;"
    print '\n'.join([templateArrayLine % {'arrayName':arrayName(g),
                                          'array':intlist2cArray([d.dsid for d in dsets])
                                          }
                     for g, dsets in dsPerGroup.iteritems()])
    print '\n'
    declareFindFunc()
    defineGroupFromDsid(dsPerGroup)
    print "} // wh"
    print "} // susy"
    print "#endif"

def defineGroupFromDsid(dsPerGroup={}) :
    print "XsecUncertainty::McGroup groupFromDsid(int dsid)"
    print "{"
    print tab+"XsecUncertainty::McGroup group = XsecUncertainty::kUnknown;"

    groups = sorted(dsPerGroup.keys())
    templateLine = (tab+"if(dsidInArray(dsid, %(arrayName)s)) group = XsecUncertainty::%(groupName)s;")
    print templateLine % {'groupName' : groups[0], 'arrayName' : arrayName(groups[0]) }
    templateLine = (tab+"else "+templateLine.lstrip())
    print '\n'.join([templateLine % {'groupName' : g, 'arrayName' : arrayName(g) } for g in groups[1:]])
    print tab+"return group;"
    print "}"

def declareFindFunc() :
    print """
bool dsidInArray(const int dsid, const int* dsidList)
{
   size_t nElements = sizeof(dsidList)/sizeof(dsidList[0]);
   const int* begin = dsidList;
   const int* end   = dsidList + nElements;
   const int* it    = std::find(begin, end, dsid);
   return it!=end;
}
"""

if __name__=='__main__' :
    main()

